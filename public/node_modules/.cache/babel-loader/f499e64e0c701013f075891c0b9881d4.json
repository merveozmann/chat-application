{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\argerf-merve\\\\Desktop\\\\Chat Application\\\\public\\\\src\\\\components\\\\chatRoomContainer\\\\ChatRoomContainer.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Logout from '../logout/Logout';\nimport ChatInput from '../chatInput/ChatInput';\nimport axios from \"axios\";\nimport { sendRoomMessageRoute, getAllRoomMessagesRoute } from '../../utils/APIRoutes';\nimport { v4 as uuidv4 } from \"uuid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatRoomContainer = _ref => {\n  _s();\n\n  let {\n    currentRoom,\n    currentUser,\n    socket\n  } = _ref;\n  const [messages, setMessages] = useState([]);\n  const [arrivalMessage, setArrivalMessage] = useState(null);\n  const [writting, setWritting] = useState(\"\");\n  const scrollRef = useRef();\n  var userTyping = false;\n  var userTimingTimeout = undefined;\n  useEffect(() => {\n    if (currentRoom) {\n      socket.current.emit(\"join-room\", {\n        name: currentUser.username,\n        roomId: currentRoom,\n        userId: currentUser._id\n      });\n    }\n  });\n  useEffect(async () => {\n    if (currentRoom) {\n      const response = await axios.post(getAllRoomMessagesRoute, {\n        roomId: currentRoom\n      });\n      setMessages(response.data.messages);\n      console.log(response.data.messages);\n      console.log(messages);\n    }\n  }, []); // useEffect(() => {\n  //   if (socket.current) {\n  //     socket.current.on(\"msg-recieve\", (msg) => {\n  //       setArrivalMessage({ fromSelf: false, message: msg, createdAt: Date.now() })\n  //     })\n  //     socket.current.on(\"get-writing\", (data) => {\n  //       setWritting(data)\n  //     })\n  //   }\n  // }, [])\n  // useEffect(() => {\n  //   arrivalMessage && setMessages((prev) => [...prev, arrivalMessage])\n  // }, [arrivalMessage])\n  // useEffect(() => {\n  //   scrollRef.current?.scrollIntoView({ behaviour: \"smooth\" })\n  // }, [messages])\n\n  const handleSendMsg = async msg => {\n    await axios.post(sendRoomMessageRoute, {\n      name: currentUser.username,\n      userId: currentUser._id,\n      roomId: currentRoom,\n      message: msg\n    });\n    socket.current.emit(\"send-msg-room\", {\n      name: currentUser.username,\n      userId: currentUser._id,\n      roomId: currentRoom,\n      message: msg\n    });\n    const msgs = [...messages];\n    msgs.push({\n      name: currentUser.username,\n      userId: currentUser._id,\n      roomId: currentRoom,\n      message: msg\n    });\n    setMessages(msgs);\n    console.log(messages);\n  };\n\n  const handleKeyPress = async e => {// if (e.which != 13) {\n    //   userTyping = true;\n    //   socket.current.emit(\"send-writing\", {\n    //     from: currentUser._id,\n    //     to: currentChat._id,\n    //     userTyping: true\n    //   })\n    //   clearTimeout(userTimingTimeout);\n    //   userTimingTimeout = setTimeout(() => {\n    //     socket.current.emit(\"send-writing\", {\n    //       from: currentUser._id,\n    //       to: currentChat._id,\n    //       userTyping: false\n    //     })\n    //   }, 1000)\n    // } else {\n    //   clearTimeout(userTimingTimeout)\n    // }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatContainer__content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat__header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"user__details\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"username\",\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: currentRoom\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"username\",\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: writting == true ? \"writing..\" : \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Logout, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat__messages\",\n        children: messages.map((message, index) => {\n          /*#__PURE__*/\n          _jsxDEV(\"div\", {\n            children: message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 14\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n        handleSendMsg: handleSendMsg,\n        handleKeyPress: handleKeyPress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatRoomContainer, \"Iy1Y2J8SNeFiYP+pxyWdSrxKcAI=\");\n\n_c = ChatRoomContainer;\nexport default ChatRoomContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatRoomContainer\");","map":{"version":3,"sources":["C:/Users/argerf-merve/Desktop/Chat Application/public/src/components/chatRoomContainer/ChatRoomContainer.jsx"],"names":["React","useState","useEffect","useRef","Logout","ChatInput","axios","sendRoomMessageRoute","getAllRoomMessagesRoute","v4","uuidv4","ChatRoomContainer","currentRoom","currentUser","socket","messages","setMessages","arrivalMessage","setArrivalMessage","writting","setWritting","scrollRef","userTyping","userTimingTimeout","undefined","current","emit","name","username","roomId","userId","_id","response","post","data","console","log","handleSendMsg","msg","message","msgs","push","handleKeyPress","e","map","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\nimport Logout from '../logout/Logout';\r\nimport ChatInput from '../chatInput/ChatInput';\r\nimport axios from \"axios\"\r\nimport { sendRoomMessageRoute, getAllRoomMessagesRoute } from '../../utils/APIRoutes';\r\nimport { v4 as uuidv4 } from \"uuid\"\r\n\r\nconst ChatRoomContainer = ({ currentRoom, currentUser, socket }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [arrivalMessage, setArrivalMessage] = useState(null);\r\n  const [writting, setWritting] = useState(\"\");\r\n  const scrollRef = useRef();\r\n  var userTyping = false;\r\n  var userTimingTimeout = undefined;\r\n\r\n  useEffect(() => {\r\n    if (currentRoom) {\r\n      socket.current.emit(\"join-room\", { name: currentUser.username, roomId: currentRoom, userId: currentUser._id })\r\n    }\r\n  })\r\n\r\n  useEffect(async () => {\r\n    if (currentRoom) {\r\n      const response = await axios.post(getAllRoomMessagesRoute, {\r\n        roomId: currentRoom\r\n      })\r\n      setMessages(response.data.messages);\r\n      console.log(response.data.messages)\r\n      console.log(messages)\r\n    }\r\n  }, [])\r\n  // useEffect(() => {\r\n  //   if (socket.current) {\r\n  //     socket.current.on(\"msg-recieve\", (msg) => {\r\n  //       setArrivalMessage({ fromSelf: false, message: msg, createdAt: Date.now() })\r\n  //     })\r\n  //     socket.current.on(\"get-writing\", (data) => {\r\n  //       setWritting(data)\r\n  //     })\r\n  //   }\r\n  // }, [])\r\n  // useEffect(() => {\r\n  //   arrivalMessage && setMessages((prev) => [...prev, arrivalMessage])\r\n  // }, [arrivalMessage])\r\n  // useEffect(() => {\r\n  //   scrollRef.current?.scrollIntoView({ behaviour: \"smooth\" })\r\n  // }, [messages])\r\n  const handleSendMsg = async (msg) => {\r\n    await axios.post(sendRoomMessageRoute, {\r\n      name: currentUser.username,\r\n      userId: currentUser._id,\r\n      roomId: currentRoom,\r\n      message: msg\r\n    })\r\n    socket.current.emit(\"send-msg-room\", {\r\n      name: currentUser.username,\r\n      userId: currentUser._id,\r\n      roomId: currentRoom,\r\n      message: msg\r\n    })\r\n    const msgs = [...messages];\r\n    msgs.push({\r\n      name: currentUser.username,\r\n      userId: currentUser._id,\r\n      roomId: currentRoom,\r\n      message: msg\r\n    });\r\n    setMessages(msgs)\r\n    console.log(messages)\r\n  }\r\n  const handleKeyPress = async (e) => {\r\n    // if (e.which != 13) {\r\n    //   userTyping = true;\r\n    //   socket.current.emit(\"send-writing\", {\r\n    //     from: currentUser._id,\r\n    //     to: currentChat._id,\r\n    //     userTyping: true\r\n    //   })\r\n    //   clearTimeout(userTimingTimeout);\r\n    //   userTimingTimeout = setTimeout(() => {\r\n    //     socket.current.emit(\"send-writing\", {\r\n    //       from: currentUser._id,\r\n    //       to: currentChat._id,\r\n    //       userTyping: false\r\n    //     })\r\n    //   }, 1000)\r\n    // } else {\r\n    //   clearTimeout(userTimingTimeout)\r\n    // }\r\n  }\r\n  return (\r\n    <div>\r\n\r\n      <div className='chatContainer__content'>\r\n        <div className=\"chat__header\">\r\n          <div className=\"user__details\">\r\n            <div className=\"username\">\r\n              <h3>{currentRoom}</h3>\r\n            </div>\r\n            <div className=\"username\">\r\n              <h3>{writting == true ? \"writing..\" : \"\"}</h3>\r\n            </div>\r\n          </div>\r\n          <Logout />\r\n        </div>\r\n        <div className=\"chat__messages\">\r\n          {\r\n           messages.map((message,index)=>{\r\n             <div>{message}</div>\r\n           })\r\n          }\r\n        </div>\r\n        <ChatInput handleSendMsg={handleSendMsg} handleKeyPress={handleKeyPress} />\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChatRoomContainer"]},"metadata":{},"sourceType":"module"}