{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\argerf-merve\\\\Desktop\\\\Chat Application\\\\public\\\\src\\\\components\\\\chatRoomContainer\\\\ChatRoomContainer.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatRoomContainer = _ref => {\n  _s();\n\n  let {\n    currentRoom,\n    currentUser,\n    socket\n  } = _ref;\n  const [messages, setMessages] = useState([]);\n  const [arrivalMessage, setArrivalMessage] = useState(null);\n  const [writting, setWritting] = useState(\"\");\n  const scrollRef = useRef();\n  var userTyping = false;\n  var userTimingTimeout = undefined;\n  useEffect(async () => {\n    if (currentUser) {\n      const response = await axios.post(getAllMessagesRoute, {\n        from: currentUser._id,\n        to: currentChat._id\n      });\n      setMessages(response.data.projectedMessages);\n    }\n  }, [currentChat]);\n  useEffect(() => {\n    if (socket.current) {\n      socket.current.on(\"msg-recieve\", msg => {\n        setArrivalMessage({\n          fromSelf: false,\n          message: msg,\n          createdAt: Date.now()\n        });\n      });\n      socket.current.on(\"get-writing\", data => {\n        setWritting(data);\n      });\n    }\n  }, []);\n  useEffect(() => {\n    arrivalMessage && setMessages(prev => [...prev, arrivalMessage]);\n  }, [arrivalMessage]);\n  useEffect(() => {\n    var _scrollRef$current;\n\n    (_scrollRef$current = scrollRef.current) === null || _scrollRef$current === void 0 ? void 0 : _scrollRef$current.scrollIntoView({\n      behaviour: \"smooth\"\n    });\n  }, [messages]);\n\n  const handleSendMsg = async msg => {// await axios.post(sendMessageRoute, {\n    //   from: currentUser._id,\n    //   to: currentChat._id,\n    //   message: msg\n    // })\n    // socket.current.emit(\"send-msg\", {\n    //   from: currentUser._id,\n    //   to: currentChat._id,\n    //   message: msg\n    // })\n    // const msgs = [...messages];\n    // msgs.push({ fromSelf: true, message: msg });\n    // setMessages(msgs)\n  };\n\n  const handleKeyPress = async e => {\n    if (e.which != 13) {\n      userTyping = true;\n      socket.current.emit(\"send-writing\", {\n        from: currentUser._id,\n        to: currentChat._id,\n        userTyping: true\n      });\n      clearTimeout(userTimingTimeout);\n      userTimingTimeout = setTimeout(() => {\n        socket.current.emit(\"send-writing\", {\n          from: currentUser._id,\n          to: currentChat._id,\n          userTyping: false\n        });\n      }, 1000);\n    } else {\n      clearTimeout(userTimingTimeout);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: currentChat && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatContainer__content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat__header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"user__details\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"username\",\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: currentChat.username\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"username\",\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: writting == true ? \"writing..\" : \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Logout, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat__messages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n        handleSendMsg: handleSendMsg,\n        handleKeyPress: handleKeyPress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatRoomContainer, \"3rWREfyTqOAdpqHY/knbPWD63bY=\");\n\n_c = ChatRoomContainer;\nexport default ChatRoomContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatRoomContainer\");","map":{"version":3,"sources":["C:/Users/argerf-merve/Desktop/Chat Application/public/src/components/chatRoomContainer/ChatRoomContainer.jsx"],"names":["React","ChatRoomContainer","currentRoom","currentUser","socket","messages","setMessages","useState","arrivalMessage","setArrivalMessage","writting","setWritting","scrollRef","useRef","userTyping","userTimingTimeout","undefined","useEffect","response","axios","post","getAllMessagesRoute","from","_id","to","currentChat","data","projectedMessages","current","on","msg","fromSelf","message","createdAt","Date","now","prev","scrollIntoView","behaviour","handleSendMsg","handleKeyPress","e","which","emit","clearTimeout","setTimeout","username"],"mappings":"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","sourcesContent":["import React from 'react'\r\n\r\nconst ChatRoomContainer = ({ currentRoom, currentUser, socket }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [arrivalMessage, setArrivalMessage] = useState(null);\r\n  const [writting, setWritting] = useState(\"\");\r\n  const scrollRef = useRef();\r\n  var userTyping = false;\r\n  var userTimingTimeout = undefined;\r\n\r\n  useEffect(async () => {\r\n    if (currentUser) {\r\n      const response = await axios.post(getAllMessagesRoute, {\r\n        from: currentUser._id,\r\n        to: currentChat._id\r\n      })\r\n      setMessages(response.data.projectedMessages);\r\n    }\r\n  }, [currentChat])\r\n  useEffect(() => {\r\n    if (socket.current) {\r\n      socket.current.on(\"msg-recieve\", (msg) => {\r\n        setArrivalMessage({ fromSelf: false, message: msg, createdAt: Date.now() })\r\n      })\r\n      socket.current.on(\"get-writing\", (data) => {\r\n        setWritting(data)\r\n      })\r\n    }\r\n  }, [])\r\n  useEffect(() => {\r\n    arrivalMessage && setMessages((prev) => [...prev, arrivalMessage])\r\n  }, [arrivalMessage])\r\n  useEffect(() => {\r\n    scrollRef.current?.scrollIntoView({ behaviour: \"smooth\" })\r\n  }, [messages])\r\n  const handleSendMsg = async (msg) => {\r\n    // await axios.post(sendMessageRoute, {\r\n    //   from: currentUser._id,\r\n    //   to: currentChat._id,\r\n    //   message: msg\r\n    // })\r\n    // socket.current.emit(\"send-msg\", {\r\n    //   from: currentUser._id,\r\n    //   to: currentChat._id,\r\n    //   message: msg\r\n    // })\r\n    // const msgs = [...messages];\r\n    // msgs.push({ fromSelf: true, message: msg });\r\n    // setMessages(msgs)\r\n  }\r\n  const handleKeyPress = async (e) => {\r\n    if (e.which != 13) {\r\n      userTyping = true;\r\n      socket.current.emit(\"send-writing\", {\r\n        from: currentUser._id,\r\n        to: currentChat._id,\r\n        userTyping: true\r\n      })\r\n      clearTimeout(userTimingTimeout);\r\n      userTimingTimeout = setTimeout(() => {\r\n        socket.current.emit(\"send-writing\", {\r\n          from: currentUser._id,\r\n          to: currentChat._id,\r\n          userTyping: false\r\n        })\r\n      }, 1000)\r\n    } else {\r\n      clearTimeout(userTimingTimeout)\r\n    }\r\n  }\r\n  return (\r\n    <div>\r\n      {currentChat &&\r\n        <div className='chatContainer__content'>\r\n          <div className=\"chat__header\">\r\n            <div className=\"user__details\">\r\n              <div className=\"username\">\r\n                <h3>{currentChat.username}</h3>\r\n              </div>\r\n              <div className=\"username\">\r\n                <h3>{writting == true ? \"writing..\" : \"\"}</h3>\r\n              </div>\r\n            </div>\r\n            <Logout />\r\n          </div>\r\n          <div className=\"chat__messages\">\r\n\r\n          </div>\r\n          <ChatInput handleSendMsg={handleSendMsg} handleKeyPress={handleKeyPress} />\r\n        </div>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChatRoomContainer"]},"metadata":{},"sourceType":"module"}