{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\merve\\\\Desktop\\\\Chat Application\\\\public\\\\src\\\\pages\\\\register\\\\Register.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport axios from \"axios\";\nimport { registerRoute } from '../../utils/APIRoutes';\nimport \"./register.css\";\nimport 'react-toastify/dist/ReactToastify.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ntoast.configure();\n\nconst notify = message => {\n  toast(message);\n};\n\nconst Register = () => {\n  _s();\n\n  const navigate = useNavigate();\n  const [values, setValues] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\"\n  });\n  useEffect(() => {\n    if (localStorage.getItem(\"chat-app-user\")) {\n      navigate('/');\n    }\n  }, []);\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    if (handleValidation()) {\n      const {\n        password,\n        username,\n        email\n      } = values;\n      const {\n        data\n      } = await axios.post(registerRoute, {\n        username,\n        email,\n        password\n      });\n\n      if (data.status == false) {\n        notify(data.msg);\n      }\n\n      if (data.status == true) {\n        // localStorage.setItem(\"chat-app-user\", JSON.stringify(data.user));\n        navigate(\"/login\");\n      }\n    }\n  };\n\n  const handleValidation = () => {\n    const {\n      password,\n      confirmPassword,\n      username,\n      email\n    } = values;\n\n    if (password !== confirmPassword) {\n      notify(\"password and confirm password should be same\");\n      return false;\n    } else if (password == \"\" && confirmPassword == \"\") {\n      notify(\"Password is not null\");\n      return false;\n    } else if (email == \"\") {\n      notify(\"Email is not null\");\n      return false;\n    } else if (username == \"\") {\n      notify(\"Username is not null\");\n      return false;\n    }\n\n    return true;\n  };\n\n  const handleChange = event => {\n    setValues({ ...values,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"register__container\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: event => handleSubmit(event),\n      className: \"register__form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Chatt App\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"username\",\n        id: \"\",\n        placeholder: \"username\",\n        onChange: e => handleChange(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"email\",\n        id: \"\",\n        placeholder: \"email\",\n        onChange: e => handleChange(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        name: \"password\",\n        id: \"\",\n        placeholder: \"password\",\n        onChange: e => handleChange(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        name: \"confirmPassword\",\n        id: \"\",\n        placeholder: \"confirm password\",\n        onChange: e => handleChange(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Create User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Already have an account ? \", /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/login\",\n          children: \"Login.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 47\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Register, \"qOAfb/JicmMX+o3Xu2+RxsPDgbM=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["C:/Users/merve/Desktop/Chat Application/public/src/pages/register/Register.jsx"],"names":["React","useState","useEffect","Link","useNavigate","toast","axios","registerRoute","configure","notify","message","Register","navigate","values","setValues","username","email","password","confirmPassword","localStorage","getItem","handleSubmit","event","preventDefault","handleValidation","data","post","status","msg","handleChange","target","name","value","e"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\nimport axios from \"axios\";\r\nimport { registerRoute } from '../../utils/APIRoutes';\r\nimport \"./register.css\"\r\nimport 'react-toastify/dist/ReactToastify.css';\r\ntoast.configure()\r\n\r\nconst notify = (message) => {\r\n    toast(message)\r\n}\r\n\r\nconst Register = () => {\r\n    const navigate = useNavigate()\r\n    const [values, setValues] = useState({\r\n        username: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\"\r\n    })\r\n    useEffect(() => {\r\n        if (localStorage.getItem(\"chat-app-user\")) {\r\n            navigate('/')\r\n        }\r\n    }, [])\r\n    const handleSubmit = async (event) => {\r\n\r\n        event.preventDefault();\r\n        if (handleValidation()) {\r\n            const { password, username, email } = values;\r\n            const { data } = await axios.post(registerRoute, {\r\n                username, email, password\r\n            })\r\n            if (data.status == false) {\r\n                notify(data.msg)\r\n            }\r\n            if (data.status == true) {\r\n                // localStorage.setItem(\"chat-app-user\", JSON.stringify(data.user));\r\n                navigate(\"/login\")\r\n            }\r\n        }\r\n    }\r\n    const handleValidation = () => {\r\n        const { password, confirmPassword, username, email } = values;\r\n\r\n        if (password !== confirmPassword) {\r\n            notify(\"password and confirm password should be same\")\r\n            return false;\r\n        } else if (password == \"\" && confirmPassword == \"\") {\r\n            notify(\"Password is not null\")\r\n            return false;\r\n        } else if (email == \"\") {\r\n            notify(\"Email is not null\")\r\n            return false;\r\n        } else if (username == \"\") {\r\n            notify(\"Username is not null\")\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    const handleChange = (event) => {\r\n        setValues({ ...values, [event.target.name]: event.target.value })\r\n\r\n    }\r\n    return (\r\n        <div className=\"register__container\">\r\n            <form onSubmit={(event) => handleSubmit(event)} className=\"register__form\">\r\n                <div className=\"title\">\r\n                    <h3>Chatt App</h3>\r\n                </div>\r\n                <input type=\"text\" name=\"username\" id=\"\" placeholder='username' onChange={(e) => handleChange(e)} />\r\n                <input type=\"text\" name=\"email\" id=\"\" placeholder='email' onChange={(e) => handleChange(e)} />\r\n                <input type=\"password\" name=\"password\" id=\"\" placeholder='password' onChange={(e) => handleChange(e)} />\r\n                <input type=\"password\" name=\"confirmPassword\" id=\"\" placeholder='confirm password' onChange={(e) => handleChange(e)} />\r\n                <button type=\"submit\">Create User</button>\r\n                <span>\r\n                    Already have an account ? <Link to=\"/login\">Login.</Link>\r\n                </span>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register"]},"metadata":{},"sourceType":"module"}