{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\argerf-merve\\\\Desktop\\\\Chat Application\\\\public\\\\src\\\\components\\\\chatContainer\\\\ChatContainer.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport \"./chatContainer.css\";\nimport Logo from \"../../assets/img/logo-small.png\";\nimport Logout from '../logout/Logout';\nimport ChatInput from '../chatInput/ChatInput';\nimport axios from \"axios\";\nimport { sendMessageRoute, getAllMessagesRoute } from '../../utils/APIRoutes';\nimport { v4 as uuidv4 } from \"uuid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatContainer = _ref => {\n  _s();\n\n  let {\n    currentChat,\n    currentUser,\n    socket\n  } = _ref;\n  const [messages, setMessages] = useState([]);\n  const [arrivalMessage, setArrivalMessage] = useState(null);\n  const scrollRef = useRef();\n  useEffect(async () => {\n    if (currentUser) {\n      const response = await axios.post(getAllMessagesRoute, {\n        from: currentUser._id,\n        to: currentChat._id\n      });\n      setMessages(response.data.projectedMessages);\n    }\n  }, [currentChat]);\n  useEffect(() => {\n    if (socket.current) {\n      socket.current.on(\"msg-recieve\", msg => {\n        setArrivalMessage({\n          fromSelf: false,\n          message: msg,\n          createdAt: Date.now()\n        });\n      });\n    }\n  }, []);\n  useEffect(() => {\n    arrivalMessage && setMessages(prev => [...prev, arrivalMessage]);\n  }, [arrivalMessage]);\n  useEffect(() => {\n    var _scrollRef$current;\n\n    (_scrollRef$current = scrollRef.current) === null || _scrollRef$current === void 0 ? void 0 : _scrollRef$current.scrollIntoView({\n      behaviour: \"smooth\"\n    });\n  }, [messages]);\n\n  const handleSendMsg = async msg => {\n    await axios.post(sendMessageRoute, {\n      from: currentUser._id,\n      to: currentChat._id,\n      message: msg\n    });\n    socket.current.emit(\"send-msg\", {\n      from: currentUser._id,\n      to: currentChat._id,\n      message: msg\n    });\n    const msgs = [...messages];\n    msgs.push({\n      fromSelf: true,\n      message: msg\n    });\n    console.log({\n      msgs\n    });\n    setMessages(msgs);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: currentChat && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatContainer__content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat__header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"user__details\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"avatar\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: Logo,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"username\",\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: currentChat.username\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Logout, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat__messages\",\n        children: messages.map(message => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: scrollRef,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `message ${message.fromSelf ? \"sended\" : \"recieved\"}`,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message__content\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: message.message\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 74,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: message.createdAt\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 41\n            }, this)\n          }, uuidv4(), false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 37\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n        handleSendMsg: handleSendMsg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ChatContainer, \"24PAl+8SRnL31DAMuSC7ZN0oOhU=\");\n\n_c = ChatContainer;\nexport default ChatContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatContainer\");","map":{"version":3,"sources":["C:/Users/argerf-merve/Desktop/Chat Application/public/src/components/chatContainer/ChatContainer.jsx"],"names":["React","useState","useEffect","useRef","Logo","Logout","ChatInput","axios","sendMessageRoute","getAllMessagesRoute","v4","uuidv4","ChatContainer","currentChat","currentUser","socket","messages","setMessages","arrivalMessage","setArrivalMessage","scrollRef","response","post","from","_id","to","data","projectedMessages","current","on","msg","fromSelf","message","createdAt","Date","now","prev","scrollIntoView","behaviour","handleSendMsg","emit","msgs","push","console","log","username","map"],"mappings":"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","sourcesContent":["import React ,{useState,useEffect,useRef} from 'react'\r\nimport \"./chatContainer.css\"\r\nimport Logo from \"../../assets/img/logo-small.png\";\r\nimport Logout from '../logout/Logout';\r\nimport ChatInput from '../chatInput/ChatInput';\r\nimport axios from \"axios\"\r\nimport { sendMessageRoute,getAllMessagesRoute } from '../../utils/APIRoutes';\r\nimport {v4 as uuidv4} from \"uuid\"\r\n\r\nconst ChatContainer = ({ currentChat,currentUser,socket }) => {\r\n    const [ messages , setMessages ]= useState([]);\r\n    const [arrivalMessage,setArrivalMessage]=useState(null);\r\n    const scrollRef = useRef();\r\n    useEffect(async()=>{\r\n        if(currentUser){\r\n            const response = await axios.post(getAllMessagesRoute,{\r\n                from:currentUser._id,\r\n                to:currentChat._id\r\n            })\r\n            setMessages(response.data.projectedMessages);\r\n        }\r\n    },[currentChat])\r\n    useEffect(()=>{\r\n        if(socket.current){\r\n            socket.current.on(\"msg-recieve\",(msg)=>{\r\n                setArrivalMessage({fromSelf:false,message:msg,createdAt:Date.now()})\r\n            })\r\n        }\r\n    },[])\r\n    useEffect(()=>{\r\n        arrivalMessage && setMessages((prev)=>[...prev,arrivalMessage])\r\n    },[arrivalMessage])\r\n    useEffect(()=>{\r\n        scrollRef.current?.scrollIntoView({behaviour:\"smooth\"})\r\n    },[messages])\r\n    const handleSendMsg =async (msg)=>{\r\n        await axios.post(sendMessageRoute,{\r\n            from:currentUser._id,\r\n            to:currentChat._id,\r\n            message:msg\r\n        })\r\n        socket.current.emit(\"send-msg\",{\r\n            from:currentUser._id,\r\n            to:currentChat._id,\r\n            message:msg\r\n        })\r\n        const msgs = [...messages];\r\n        msgs.push({fromSelf:true,message:msg});\r\n        console.log({msgs})\r\n        setMessages(msgs)\r\n    }\r\n    return (\r\n        <div>\r\n            {currentChat &&\r\n                <div className='chatContainer__content'>\r\n                    <div className=\"chat__header\">\r\n                        <div className=\"user__details\">\r\n                            <div className=\"avatar\">\r\n                                <img src={Logo} alt=\"\" />\r\n                            </div>\r\n                            <div className=\"username\">\r\n                                <h3>{currentChat.username}</h3>\r\n                            </div>\r\n                        </div>\r\n                        <Logout />\r\n                    </div>\r\n                    <div className=\"chat__messages\">\r\n                        {\r\n                            messages.map((message)=>{\r\n                                return(\r\n                                    <div ref={scrollRef} key={uuidv4()}>\r\n                                        <div className={`message ${message.fromSelf ? \"sended\":\"recieved\"}`}>\r\n                                            <div className=\"message__content\">\r\n                                                <p>\r\n                                                    {message.message}\r\n                                                </p>\r\n                                            </div>\r\n                                            <div>\r\n                                                {message.createdAt}\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                )\r\n                            }\r\n                            )}\r\n\r\n                    </div>\r\n                    <ChatInput handleSendMsg={handleSendMsg}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatContainer"]},"metadata":{},"sourceType":"module"}