{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\merve\\\\Desktop\\\\Chat Application\\\\public\\\\src\\\\components\\\\chatRoomContainer\\\\ChatRoomContainer.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Logout from '../logout/Logout';\nimport ChatInput from '../chatInput/ChatInput';\nimport { format } from \"timeago.js\";\nimport axios from \"axios\";\nimport { sendRoomMessageRoute, getAllRoomMessagesRoute } from '../../utils/APIRoutes';\nimport { v4 as uuidv4 } from \"uuid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatRoomContainer = _ref => {\n  _s();\n\n  let {\n    currentRoom,\n    currentUser,\n    socket\n  } = _ref;\n  const [messages, setMessages] = useState([]);\n  const [arrivalMessage, setArrivalMessage] = useState(null);\n  const [writting, setWritting] = useState(\"\");\n  const [writtingUserName, setWrittingUserName] = useState(\"\");\n  const scrollRef = useRef();\n  var typing = false;\n  var userTimingTimeout = undefined;\n  useEffect(() => {\n    if (currentRoom) {\n      socket.current.emit(\"join-room\", {\n        name: currentUser.username,\n        roomId: currentRoom,\n        userId: currentUser._id\n      });\n    }\n  }, []);\n  useEffect(async () => {\n    if (currentUser) {\n      const response = await axios.post(getAllRoomMessagesRoute, {\n        roomId: currentRoom\n      });\n      console.log(response.data.messages);\n      setMessages(response.data.messages);\n    }\n  }, [currentRoom]);\n  useEffect(() => {\n    if (socket.current) {\n      socket.current.on(\"msg-recieve-room\", msg => {\n        setArrivalMessage({\n          createdAt: Date.now(),\n          message: msg.message,\n          name: msg.name,\n          roomId: msg.roomId\n        });\n      });\n      socket.current.on(\"get-writing-room\", data => {\n        if (data.roomId == currentRoom) {\n          setWrittingUserName(data.name);\n          setWritting(data.userTyping);\n        }\n      });\n    }\n  }, []);\n  useEffect(() => {\n    arrivalMessage && setMessages(prev => [...prev, arrivalMessage]);\n  }, [arrivalMessage]);\n  useEffect(() => {\n    var _scrollRef$current;\n\n    (_scrollRef$current = scrollRef.current) === null || _scrollRef$current === void 0 ? void 0 : _scrollRef$current.scrollIntoView({\n      behaviour: \"smooth\"\n    });\n  }, [messages]);\n\n  const handleSendMsg = async msg => {\n    await axios.post(sendRoomMessageRoute, {\n      name: currentUser.username,\n      userId: currentUser._id,\n      roomId: currentRoom,\n      message: msg\n    });\n    socket.current.emit(\"send-msg-room\", {\n      name: currentUser.username,\n      userId: currentUser._id,\n      roomId: currentRoom,\n      message: msg\n    });\n    const msgs = [...messages];\n    msgs.push({\n      name: currentUser.username,\n      userId: currentUser._id,\n      roomId: currentRoom,\n      message: msg\n    });\n    setMessages(msgs);\n    console.log(messages);\n  };\n\n  const handleKeyPress = async e => {\n    if (e.which != 13) {\n      typing = true;\n      socket.current.emit(\"send-writing-room\", {\n        roomId: currentRoom,\n        name: currentUser.username,\n        userTyping: true\n      });\n      clearTimeout(userTimingTimeout);\n      userTimingTimeout = setTimeout(() => {\n        socket.current.emit(\"send-writing-room\", {\n          roomId: currentRoom,\n          name: currentUser.username,\n          userTyping: false\n        });\n      }, 1000);\n    } else {\n      clearTimeout(userTimingTimeout);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatContainer__content\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat__header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user__details\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"username\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: currentRoom\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"user__type\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: writting == true ? writtingUserName + \" writing..\" : \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Logout, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat__messages\",\n      children: messages.map(message => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: scrollRef,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message ${message.userId == currentUser._id ? \"sended\" : \"recieved\"}`,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message__content\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [message.name, \"-\", message.message]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"message__content-date\",\n                children: format(message.createdAt)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 17\n          }, this)\n        }, uuidv4(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n      handleSendMsg: handleSendMsg,\n      handleKeyPress: handleKeyPress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatRoomContainer, \"OH6uoDGRnFA5X//WWNLJ8Fs+S+Y=\");\n\n_c = ChatRoomContainer;\nexport default ChatRoomContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatRoomContainer\");","map":{"version":3,"sources":["C:/Users/merve/Desktop/Chat Application/public/src/components/chatRoomContainer/ChatRoomContainer.jsx"],"names":["React","useState","useEffect","useRef","Logout","ChatInput","format","axios","sendRoomMessageRoute","getAllRoomMessagesRoute","v4","uuidv4","ChatRoomContainer","currentRoom","currentUser","socket","messages","setMessages","arrivalMessage","setArrivalMessage","writting","setWritting","writtingUserName","setWrittingUserName","scrollRef","typing","userTimingTimeout","undefined","current","emit","name","username","roomId","userId","_id","response","post","console","log","data","on","msg","createdAt","Date","now","message","userTyping","prev","scrollIntoView","behaviour","handleSendMsg","msgs","push","handleKeyPress","e","which","clearTimeout","setTimeout","map"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,SAASC,MAAT,QAAuB,YAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,oBAAT,EAA+BC,uBAA/B,QAA8D,uBAA9D;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;;;AAEA,MAAMC,iBAAiB,GAAG,QAA0C;AAAA;;AAAA,MAAzC;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,WAAf;AAA4BC,IAAAA;AAA5B,GAAyC;AAClE,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BhB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACiB,cAAD,EAAiBC,iBAAjB,IAAsClB,QAAQ,CAAC,IAAD,CAApD;AACA,QAAM,CAACmB,QAAD,EAAWC,WAAX,IAA0BpB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACqB,gBAAD,EAAmBC,mBAAnB,IAA0CtB,QAAQ,CAAC,EAAD,CAAxD;AAEA,QAAMuB,SAAS,GAAGrB,MAAM,EAAxB;AACA,MAAIsB,MAAM,GAAG,KAAb;AACA,MAAIC,iBAAiB,GAAGC,SAAxB;AAEAzB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,WAAJ,EAAiB;AACfE,MAAAA,MAAM,CAACa,OAAP,CAAeC,IAAf,CAAoB,WAApB,EAAiC;AAAEC,QAAAA,IAAI,EAAEhB,WAAW,CAACiB,QAApB;AAA8BC,QAAAA,MAAM,EAAEnB,WAAtC;AAAmDoB,QAAAA,MAAM,EAAEnB,WAAW,CAACoB;AAAvE,OAAjC;AACD;AACF,GAJQ,EAIN,EAJM,CAAT;AAMAhC,EAAAA,SAAS,CAAC,YAAY;AACpB,QAAIY,WAAJ,EAAiB;AACf,YAAMqB,QAAQ,GAAG,MAAM5B,KAAK,CAAC6B,IAAN,CAAW3B,uBAAX,EAAoC;AACzDuB,QAAAA,MAAM,EAAEnB;AADiD,OAApC,CAAvB;AAGAwB,MAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACI,IAAT,CAAcvB,QAA1B;AACAC,MAAAA,WAAW,CAACkB,QAAQ,CAACI,IAAT,CAAcvB,QAAf,CAAX;AACD;AACF,GARQ,EAQN,CAACH,WAAD,CARM,CAAT;AAUAX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,MAAM,CAACa,OAAX,EAAoB;AAClBb,MAAAA,MAAM,CAACa,OAAP,CAAeY,EAAf,CAAkB,kBAAlB,EAAuCC,GAAD,IAAS;AAC7CtB,QAAAA,iBAAiB,CAAC;AAAEuB,UAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL,EAAb;AAAyBC,UAAAA,OAAO,EAAEJ,GAAG,CAACI,OAAtC;AAA+Cf,UAAAA,IAAI,EAAEW,GAAG,CAACX,IAAzD;AAA+DE,UAAAA,MAAM,EAAES,GAAG,CAACT;AAA3E,SAAD,CAAjB;AACD,OAFD;AAGAjB,MAAAA,MAAM,CAACa,OAAP,CAAeY,EAAf,CAAkB,kBAAlB,EAAuCD,IAAD,IAAU;AAC9C,YAAIA,IAAI,CAACP,MAAL,IAAenB,WAAnB,EAAgC;AAC9BU,UAAAA,mBAAmB,CAACgB,IAAI,CAACT,IAAN,CAAnB;AACAT,UAAAA,WAAW,CAACkB,IAAI,CAACO,UAAN,CAAX;AACD;AACF,OALD;AAMD;AACF,GAZQ,EAYN,EAZM,CAAT;AAaA5C,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,cAAc,IAAID,WAAW,CAAE8B,IAAD,IAAU,CAAC,GAAGA,IAAJ,EAAU7B,cAAV,CAAX,CAA7B;AACD,GAFQ,EAEN,CAACA,cAAD,CAFM,CAAT;AAGAhB,EAAAA,SAAS,CAAC,MAAM;AAAA;;AACd,0BAAAsB,SAAS,CAACI,OAAV,0EAAmBoB,cAAnB,CAAkC;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAAlC;AACD,GAFQ,EAEN,CAACjC,QAAD,CAFM,CAAT;;AAGA,QAAMkC,aAAa,GAAG,MAAOT,GAAP,IAAe;AACnC,UAAMlC,KAAK,CAAC6B,IAAN,CAAW5B,oBAAX,EAAiC;AACrCsB,MAAAA,IAAI,EAAEhB,WAAW,CAACiB,QADmB;AAErCE,MAAAA,MAAM,EAAEnB,WAAW,CAACoB,GAFiB;AAGrCF,MAAAA,MAAM,EAAEnB,WAH6B;AAIrCgC,MAAAA,OAAO,EAAEJ;AAJ4B,KAAjC,CAAN;AAMA1B,IAAAA,MAAM,CAACa,OAAP,CAAeC,IAAf,CAAoB,eAApB,EAAqC;AACnCC,MAAAA,IAAI,EAAEhB,WAAW,CAACiB,QADiB;AAEnCE,MAAAA,MAAM,EAAEnB,WAAW,CAACoB,GAFe;AAGnCF,MAAAA,MAAM,EAAEnB,WAH2B;AAInCgC,MAAAA,OAAO,EAAEJ;AAJ0B,KAArC;AAMA,UAAMU,IAAI,GAAG,CAAC,GAAGnC,QAAJ,CAAb;AACAmC,IAAAA,IAAI,CAACC,IAAL,CAAU;AACRtB,MAAAA,IAAI,EAAEhB,WAAW,CAACiB,QADV;AAERE,MAAAA,MAAM,EAAEnB,WAAW,CAACoB,GAFZ;AAGRF,MAAAA,MAAM,EAAEnB,WAHA;AAIRgC,MAAAA,OAAO,EAAEJ;AAJD,KAAV;AAMAxB,IAAAA,WAAW,CAACkC,IAAD,CAAX;AACAd,IAAAA,OAAO,CAACC,GAAR,CAAYtB,QAAZ;AACD,GAtBD;;AAuBA,QAAMqC,cAAc,GAAG,MAAOC,CAAP,IAAa;AAClC,QAAIA,CAAC,CAACC,KAAF,IAAW,EAAf,EAAmB;AACjB9B,MAAAA,MAAM,GAAG,IAAT;AACAV,MAAAA,MAAM,CAACa,OAAP,CAAeC,IAAf,CAAoB,mBAApB,EAAyC;AACvCG,QAAAA,MAAM,EAAEnB,WAD+B;AAEvCiB,QAAAA,IAAI,EAAEhB,WAAW,CAACiB,QAFqB;AAGvCe,QAAAA,UAAU,EAAE;AAH2B,OAAzC;AAKAU,MAAAA,YAAY,CAAC9B,iBAAD,CAAZ;AACAA,MAAAA,iBAAiB,GAAG+B,UAAU,CAAC,MAAM;AACnC1C,QAAAA,MAAM,CAACa,OAAP,CAAeC,IAAf,CAAoB,mBAApB,EAAyC;AACvCG,UAAAA,MAAM,EAAEnB,WAD+B;AAEvCiB,UAAAA,IAAI,EAAEhB,WAAW,CAACiB,QAFqB;AAGvCe,UAAAA,UAAU,EAAE;AAH2B,SAAzC;AAKD,OAN6B,EAM3B,IAN2B,CAA9B;AAOD,KAfD,MAeO;AACLU,MAAAA,YAAY,CAAC9B,iBAAD,CAAZ;AACD;AACF,GAnBD;;AAoBA,sBACE;AAAK,IAAA,SAAS,EAAC,wBAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,UAAf;AAAA,iCACE;AAAA,sBAAKb;AAAL;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE;AAAK,UAAA,SAAS,EAAC,YAAf;AAAA,iCACE;AAAA,sBAAKO,QAAQ,IAAI,IAAZ,GAAoBE,gBAAgB,GAAG,YAAvC,GAAuD;AAA5D;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eASE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cATF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAYE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,gBAEIN,QAAQ,CAAC0C,GAAT,CAAcb,OAAD,IAAa;AACxB,4BACE;AAAK,UAAA,GAAG,EAAErB,SAAV;AAAA,iCACE;AAAK,YAAA,SAAS,EAAG,WAAUqB,OAAO,CAACZ,MAAR,IAAkBnB,WAAW,CAACoB,GAA9B,GAAoC,QAApC,GAA+C,UAAW,EAArF;AAAA,mCACE;AAAK,cAAA,SAAS,EAAC,kBAAf;AAAA,sCACE;AAAA,2BACGW,OAAO,CAACf,IADX,OACkBe,OAAO,CAACA,OAD1B;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAIE;AAAG,gBAAA,SAAS,EAAC,uBAAb;AAAA,0BAAsCvC,MAAM,CAACuC,OAAO,CAACH,SAAT;AAA5C;AAAA;AAAA;AAAA;AAAA,sBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF,WAA0B/B,MAAM,EAAhC;AAAA;AAAA;AAAA;AAAA,gBADF;AAaD,OAdD;AAFJ;AAAA;AAAA;AAAA;AAAA,YAZF,eA+BE,QAAC,SAAD;AAAW,MAAA,aAAa,EAAEuC,aAA1B;AAAyC,MAAA,cAAc,EAAEG;AAAzD;AAAA;AAAA;AAAA;AAAA,YA/BF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoCD,CA5HD;;GAAMzC,iB;;KAAAA,iB;AA8HN,eAAeA,iBAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\nimport Logout from '../logout/Logout';\r\nimport ChatInput from '../chatInput/ChatInput';\r\nimport { format } from \"timeago.js\"\r\nimport axios from \"axios\"\r\nimport { sendRoomMessageRoute, getAllRoomMessagesRoute } from '../../utils/APIRoutes';\r\nimport { v4 as uuidv4 } from \"uuid\"\r\n\r\nconst ChatRoomContainer = ({ currentRoom, currentUser, socket }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [arrivalMessage, setArrivalMessage] = useState(null);\r\n  const [writting, setWritting] = useState(\"\");\r\n  const [writtingUserName, setWrittingUserName] = useState(\"\");\r\n\r\n  const scrollRef = useRef();\r\n  var typing = false;\r\n  var userTimingTimeout = undefined;\r\n\r\n  useEffect(() => {\r\n    if (currentRoom) {\r\n      socket.current.emit(\"join-room\", { name: currentUser.username, roomId: currentRoom, userId: currentUser._id })\r\n    }\r\n  }, [])\r\n\r\n  useEffect(async () => {\r\n    if (currentUser) {\r\n      const response = await axios.post(getAllRoomMessagesRoute, {\r\n        roomId: currentRoom\r\n      })\r\n      console.log(response.data.messages)\r\n      setMessages(response.data.messages);\r\n    }\r\n  }, [currentRoom])\r\n\r\n  useEffect(() => {\r\n    if (socket.current) {\r\n      socket.current.on(\"msg-recieve-room\", (msg) => {\r\n        setArrivalMessage({ createdAt: Date.now(), message: msg.message, name: msg.name, roomId: msg.roomId })\r\n      })\r\n      socket.current.on(\"get-writing-room\", (data) => {\r\n        if (data.roomId == currentRoom) {\r\n          setWrittingUserName(data.name)\r\n          setWritting(data.userTyping)\r\n        }\r\n      })\r\n    }\r\n  }, [])\r\n  useEffect(() => {\r\n    arrivalMessage && setMessages((prev) => [...prev, arrivalMessage])\r\n  }, [arrivalMessage])\r\n  useEffect(() => {\r\n    scrollRef.current?.scrollIntoView({ behaviour: \"smooth\" })\r\n  }, [messages])\r\n  const handleSendMsg = async (msg) => {\r\n    await axios.post(sendRoomMessageRoute, {\r\n      name: currentUser.username,\r\n      userId: currentUser._id,\r\n      roomId: currentRoom,\r\n      message: msg\r\n    })\r\n    socket.current.emit(\"send-msg-room\", {\r\n      name: currentUser.username,\r\n      userId: currentUser._id,\r\n      roomId: currentRoom,\r\n      message: msg\r\n    })\r\n    const msgs = [...messages];\r\n    msgs.push({\r\n      name: currentUser.username,\r\n      userId: currentUser._id,\r\n      roomId: currentRoom,\r\n      message: msg\r\n    });\r\n    setMessages(msgs)\r\n    console.log(messages)\r\n  }\r\n  const handleKeyPress = async (e) => {\r\n    if (e.which != 13) {\r\n      typing = true;\r\n      socket.current.emit(\"send-writing-room\", {\r\n        roomId: currentRoom,\r\n        name: currentUser.username,\r\n        userTyping: true\r\n      })\r\n      clearTimeout(userTimingTimeout);\r\n      userTimingTimeout = setTimeout(() => {\r\n        socket.current.emit(\"send-writing-room\", {\r\n          roomId: currentRoom,\r\n          name: currentUser.username,\r\n          userTyping: false\r\n        })\r\n      }, 1000)\r\n    } else {\r\n      clearTimeout(userTimingTimeout)\r\n    }\r\n  }\r\n  return (\r\n    <div className='chatContainer__content'>\r\n      <div className=\"chat__header\">\r\n        <div className=\"user__details\">\r\n          <div className=\"username\">\r\n            <h3>{currentRoom}</h3>\r\n          </div>\r\n          <div className=\"user__type\">\r\n            <h3>{writting == true ? (writtingUserName + \" writing..\") : \"\"}</h3>\r\n          </div>\r\n        </div>\r\n        <Logout />\r\n      </div>\r\n      <div className=\"chat__messages\">\r\n        {\r\n          messages.map((message) => {\r\n            return (\r\n              <div ref={scrollRef} key={uuidv4()}>\r\n                <div className={`message ${message.userId == currentUser._id ? \"sended\" : \"recieved\"}`}>\r\n                  <div className=\"message__content\">\r\n                    <p>\r\n                      {message.name}-{message.message}\r\n                    </p>\r\n                    <p className='message__content-date'>{format(message.createdAt)}</p>\r\n                  </div>\r\n                </div>\r\n\r\n              </div>\r\n            )\r\n          })\r\n        }\r\n      </div>\r\n      <ChatInput handleSendMsg={handleSendMsg} handleKeyPress={handleKeyPress} />\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default ChatRoomContainer"]},"metadata":{},"sourceType":"module"}